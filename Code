---
title: "paerexperiment 20180430"
output:
  word_document: default
  html_notebook: default
---



```{r}
echo=TRUE;eval=FALSE
#论文实验  期望利润法及EMP法比较
library(plyr)
library(ggthemes)
library(sampling)
library(DMwR)
library(EMP)
library(car)
library(gbm)


setwd("C:/自建/川大商学院/导师/R数据集")
#公用函数
#期望利润法
#基于流失预测结果流失概率计算客户的期望利润
ep<-function(x)
{    #参数为流失预测中预测集计算的流失概率
  n<-length(x)
  m<-vector(mode="numeric",length=0)     
  
  m<-x*190*0.3-10*(1-x)*0.9-1  
  return (m)
}

#计算总利润TotalProfit，需自定义函数
TP<-function(x){
     n=length(x)
     percents=vector(mode="numeric",length=0)
     tp=vector(mode="numeric",length=0)
     tp=cumsum(x)
     nn=c(1:n)
     percents=nn/n*100
     out=list(tp,percents)
}

#计算最大利润，期望利润法
MTP<-function(x){
     n<-length(x)
     percents<-vector(mode="numeric",length=0)
     tp<-0
     tp<-sum(x[x>0])
     percents<-length((which(x>0))/n)*100     
     out<-list(tp,percents)
}

#测试集下期望利润法对应的实际利润
actual_profits<-
  function(x,n = 50)
  {    
    n<-length(x)
    profit_s<-vector(mode="numeric", length=n)
    ind_neg <- which(x==0)
    ind_pos  <- which(x==1)
    num_neg <- length(ind_neg)
    num_pos <- length(ind_pos)
    pi<-matrix(rbeta(num_pos*n,6,14), num_pos, n)
    ri<-matrix(rbeta(num_pos*n,9,1), num_pos, n)
    profit_s[ind_neg] <- -ri*10-1  #非流失者
    profit_s[ind_pos] <- -pi*190-1  #流失者
    return (profit_s)
  }

#数据集Churn.data_s
load("KDD.RData")
Churn.data_s$Churn <- ifelse(Churn.data_s$Churn == "1",1,0)
#SMOTE抽样
lst_act<-list() #训练集实际利润
lst_exp<-list() #训练集期望利润
lst_exp_test<-list() #测试集期望利润(>0)
lst_stim_test<-list()  #测试集模拟利润
lst_exp_per<-list() #测试集最大利润下的客户比例
lst_emp_stim<-list()  #emp法测试集模拟利润
lst_emp_EMP<-list()  #emp法测试集emp利润


library(caret)
for(i in 1:10) {
  sub<-createDataPartition(Churn.data_s$churn, p=0.75, list=FALSE)
  trainset<-Churn.data_s[sub, ]
  testset <-Churn.data_s[-sub, ]
  trainset<-SMOTE(churn~., trainset, perc.over=100, perc.under=200) ? 
  
  #训练模型
  churn.gbm<-gbm(formula = churn ~ .,
                 distribution = "bernoulli",
                 data = trainset,
                 n.trees = 1000,
                 interaction.depth = 7,
                 shrinkage = 0.01) 
  
  chst<-trainset$churn
  # churnP=Churn.boost$prob[,2]
  churnP<-1/(1+exp(-1*churn.gbm$fit)) #用拟合的对数几率值计算概率
  newsubtset<-cbind(chst,churnP)
  table_1<-as.data.frame(newsubtset)
  table_2<-arrange(table_1,desc(churnP))
  
 #训练集
  #计算实际利润
  actualprofits <- actual_profits(table_2$chst, n = 50)
  lst_act<-list(lst_act,actualprofits) #每次划分下的均值存入列表
  
  #期望利润求均值
  churnp<-sort(churnP,decreasing=T)
  expect<-ep(churnp)
  lst_exp<-list(lst_exp,expect)
  
 #测试集
  #Churn.boost.pred=predict.boosting(Churn.boost,newdata=testset)

  churn.iter <- gbm.perf(churn.gbm,method = "cv") ?
  churn.predict <-predict(churn.gbm,testset,n.trees = churn.iter,type="response") ?
  chrate<-churn.predict 
  chst_te<-testset$churn #测试集客户实际状态
  table_te_1<-as.data.frame(cbind(chst_te,chrate))
  table_te_2<-arrange(table_te_1,desc(chrate))
  
  # 根据期望利润寻找客户
  expect_test_1 <- ep(chrate)
  expect_test<-expect_test_1[expect_test_1>0]#选取期望利润大于0的客户 
  
  per_exp_test<-(length(expect_test)/length(chrate))  #测试集下最大化利润--客户比例
  
  lst_exp_per<-list(lst_exp_per,per_exp_test)
  
  #expect_test_Max=sum(expect_test)      #测试集期望最大总利润
  chst_te_1<-table_te_2$chst_te[1:length(expect_test)]       
  #选取期望利润大于0的客户对应的流失概率
  stim_test <- actual_profits(table_2$chst)
  
  lst_exp_test<-list(lst_exp_test,expect_test) #期望利润法利润
  lst_stim_test<-list(lst_stim_test,stim_test)  #模拟利润
  
  #EMP法
  EMP_tr<-empChurn(churn.predict, testset$churn) # 这里应该是训练集吧
  #EMP_tr$EMPfrac
  newlength<-floor(length(chrate)*(EMP_tr$EMPfrac)) #EMP下目标客户规模
  #EMP下测试集模拟利润
  exp_emp_stim<-matrix(sapply(1:50,function(x)(actual_profits(table_2$chst[1:newlength]))),50,
                       newlength,byrow=TRUE)
  emp_stim<-sum(colMeans(exp_emp_stim))       #每次划分下经50次计算的模拟利润和
  lst_emp_stim<-list(lst_emp_stim,emp_stim)
  
  EMP_emp<-EMP_tr$EMP*(length(churn.predict)) #EMP法每次划分下EMP总利润
  lst_emp_EMP<-list(lst_emp_EMP,EMP_emp) 
  
  
} #endfor

#训练集--10次划分期望利润
exp_tr<-matrix(unlist(lst_exp),10,length(expect),byrow=TRUE)
exp_trM<-colMeans(exp_tr) #均值

#训练集--10次划分对应实际利润
act_tr<-matrix(unlist(lst_act),10,length(actualprofits),byrow=TRUE)
act_trM<-colMeans(act_tr) #均值

#模拟图（训练集期望利润法下的利润与实际利润图）
total_1<-TP(act_trM)
total<-TP(exp_trM)
#x11(width = 6, height = 4)
plot(total[[2]],total[[1]],type="l",main="Churn.data_s",
xlab="percentile",ylab="Totalprofit") #预测利润
lines(total_1[[2]],total_1[[1]],type="l",lty=2) #实际利润
abline(0,0)
legend("right", inset=0.05, lty=c(2,1),c("actual profit","predict profit"))

#测试集--最大期望利润
exp_te<-matrix(unlist(lst_exp_test),10,length(stim_test),byrow=TRUE)
exp_teM<-colMeans(exp_te)
exp_teMax<-sum(exp_teM) #最大期望利润之和
#exp_teMax[[1]] #最大期望利润之和
#exp_teMax[[2]] #最大期望利润下的比例
exp_stim_te<-matrix(unlist(lst_stim_test),10,length(expect_test),byrow=TRUE)
exp_stim<-sum(colMeans(exp_stim_te))  #测试集目标客户的模拟总利润
exp_percent<-mean(matrix(unlist(lst_exp_per),1,1,byrow=TRUE))  #10次划分后期望利润法最大利润下的平均客户比例


#测试集--emp
  emp_stim_1<-matrix(unlist(lst_emp_stim),10,length(emp_stim),byrow=TRUE)
  emp_stim_sum<-mean(emp_stim_1) #emp目标比例下模拟总利润
  EMP_emp<-sum(matrix(unlist(lst_emp_EMP),10,length(EMP_emp),byrow=TRUE))  #emp法10次划分的平均EMP利润


#最终结果

#期望利润法：

exp_percent  #最大利润下的客户比例，
exp_stim   #测试集目标客户的模拟总利润
exp_teMax # 测试集最大期望利润之和

#emp法
emp_stim_sum  #emp法下目标规模对应的总利润
EMP_emp     #emp法EMP利润
EMP_tr$EMPfrac  #EMP法目标客户比例



```
